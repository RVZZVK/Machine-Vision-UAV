import torch
from ultralytics import YOLO

def main():
    # Check CUDA availability [This is to ensure the GPUs are utilized during training]
    if torch.cuda.is_available():
        print(f"CUDA is available. Using GPU: {torch.cuda.get_device_name(0)}")
    else:
        print("CUDA is not available. Using CPU.")

    # Ensure the correct device is being used [If gpu is undetected CPU will be utilized]
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"Device selected: {device}")

    # Load the YOLO model 
    model = YOLO('yolov8n.pt')

    # Train the model [Ensure to adjust epoch/trails number as well as patience & batch based on dataset size and quality]
    results = model.train(
        data=r"C:\Users\Admin\Documents\Litter Audit Project\Dataset\LitterEye.v1i.yolov8\data.yaml",
        epochs=100,
        optimizer='Adam',
        plots=True,
        patience=2,
        batch=16,
        device=device  # Use the device explicitly
    )
    # Patience controls the amount of epochs that can happen without an increase in accuray before the cycle stops.
    # Plot tells the code to plot the results in multiple graphs. 

if __name__ == '__main__':
    main()
